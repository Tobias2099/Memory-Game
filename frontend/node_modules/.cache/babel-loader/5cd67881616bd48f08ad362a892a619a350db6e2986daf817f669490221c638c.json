{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tpong\\\\OneDrive\\\\Documents\\\\____CS_Projects_Tobias\\\\memory_test\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const gridSize = 16;\n  const [numReveals, setReveals] = useState(0);\n  const [revealList, setRevealList] = useState([]);\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [gridState, setGrid] = useState(new Array(gridSize).fill(null));\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  function isFilled(value) {\n    return value !== null;\n  }\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  function addReveal(letter) {\n    setReveals(prevValue => prevValue + 1);\n    setRevealList(prevValue => [...prevValue, letter]);\n    //console.log(\"Number of reveals: \" + numReveals);\n    //console.log(\"Reveal List: \" + revealList.toString());\n  }\n  function removeReveal(letter) {\n    const index = revealList.findIndex(reveal => reveal === letter);\n    console.log(\"index: \" + index);\n    console.log(\"Removing \" + letter);\n    /*setRevealList(prevValue => {\n      prevValue.splice(index, 1);\n      return prevValue;\n    });*/\n  }\n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      console.log(\"maxed\");\n      isMaxSet(true);\n    } else {\n      console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n  }, [counter]);\n  useEffect(() => {\n    //creating the grid positions for the letters\n    let newGrid = new Array(gridSize).fill(null);\n    for (let i = 0; i < letters.length; i++) {\n      for (let j = 0; j < 2; j++) {\n        let randomIndex;\n        let posValue;\n        let letter = letters[i];\n        do {\n          randomIndex = Math.floor(Math.random() * gridSize);\n          posValue = newGrid[randomIndex];\n        } while (isFilled(posValue));\n        newGrid[randomIndex] = letter;\n      }\n    }\n    setGrid(newGrid);\n  }, []);\n  console.log(gridState.toString());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: gridState.map((letter, index) => {\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: index,\n          letter: letter,\n          counter: counter,\n          counterInc: counterIncrease,\n          counterDec: counterDecrease,\n          isMax: isMax,\n          addReveal: addReveal,\n          removeReveal: removeReveal\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Record\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Record: \", numReveals]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: revealList.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"f+N8bNSxMiSsBTYMWmMbrSWP9hg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Tile","useState","useEffect","jsxDEV","_jsxDEV","App","_s","gridSize","numReveals","setReveals","revealList","setRevealList","counter","setCounter","isMax","isMaxSet","gridState","setGrid","Array","fill","letters","isFilled","value","counterIncrease","prevValue","counterDecrease","addReveal","letter","removeReveal","index","findIndex","reveal","console","log","newGrid","i","length","j","randomIndex","posValue","Math","floor","random","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","id","counterInc","counterDec","_c","$RefreshReg$"],"sources":["C:/Users/tpong/OneDrive/Documents/____CS_Projects_Tobias/memory_test/src/App.js"],"sourcesContent":["import './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const gridSize = 16;\n  const [numReveals, setReveals] = useState(0);\n  const [revealList, setRevealList] = useState([]);\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [gridState, setGrid] = useState(new Array(gridSize).fill(null));\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n\n  function isFilled(value) {\n    return value !== null;\n  }\n\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  \n  function addReveal(letter) {\n    setReveals(prevValue => prevValue + 1);\n    setRevealList(prevValue => [...prevValue, letter]);\n    //console.log(\"Number of reveals: \" + numReveals);\n    //console.log(\"Reveal List: \" + revealList.toString());\n  }\n\n  function removeReveal(letter) {\n    const index = revealList.findIndex((reveal) => reveal === letter);\n    console.log(\"index: \" + index);\n    console.log(\"Removing \" + letter)\n    /*setRevealList(prevValue => {\n      prevValue.splice(index, 1);\n      return prevValue;\n    });*/\n  }\n\n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      console.log(\"maxed\");\n      isMaxSet(true);\n    } else {\n      console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n  }, [counter]);\n\n\n  useEffect(() => {\n    //creating the grid positions for the letters\n    let newGrid = new Array(gridSize).fill(null);\n    for (let i = 0; i < letters.length; i++) {\n      for (let j = 0; j < 2; j++) {\n        let randomIndex;\n        let posValue;\n        let letter = letters[i];\n        do {\n          randomIndex = Math.floor(Math.random() * gridSize);\n          posValue = newGrid[randomIndex];\n        } while (isFilled(posValue));\n\n        newGrid[randomIndex] = letter;\n      }\n    }\n    setGrid(newGrid);\n  }, []);\n\n  console.log(gridState.toString())\n  \n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <div className=\"grid\">\n        {gridState.map((letter, index) => {\n          return <Tile key={index} id={index} letter={letter} counter={counter} counterInc={counterIncrease} counterDec={counterDecrease} isMax={isMax} addReveal={addReveal} removeReveal={removeReveal}/>;\n        })}\n      </div>\n\n      <div className=\"Record\">\n        <h3>Record: {numReveals}</h3>\n      </div>\n      <h3>{revealList.toString()}</h3>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,IAAI,MAAM,QAAQ;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAM,CAACC,UAAU,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACe,SAAS,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAIiB,KAAK,CAACX,QAAQ,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC,CAAC;EACrE,MAAMC,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAExD,SAASC,QAAQA,CAACC,KAAK,EAAE;IACvB,OAAOA,KAAK,KAAK,IAAI;EACvB;EAEA,SAASC,eAAeA,CAAA,EAAG;IACzBV,UAAU,CAACW,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EACxC;EAEA,SAASC,eAAeA,CAAA,EAAG;IACzBZ,UAAU,CAACW,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EACxC;EAEA,SAASE,SAASA,CAACC,MAAM,EAAE;IACzBlB,UAAU,CAACe,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IACtCb,aAAa,CAACa,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEG,MAAM,CAAC,CAAC;IAClD;IACA;EACF;EAEA,SAASC,YAAYA,CAACD,MAAM,EAAE;IAC5B,MAAME,KAAK,GAAGnB,UAAU,CAACoB,SAAS,CAAEC,MAAM,IAAKA,MAAM,KAAKJ,MAAM,CAAC;IACjEK,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGJ,KAAK,CAAC;IAC9BG,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGN,MAAM,CAAC;IACjC;AACJ;AACA;AACA;EACE;EAEAzB,SAAS,CAAC,MAAM;IACd8B,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGrB,OAAO,CAAC;IACjC,IAAIA,OAAO,IAAI,CAAC,EAAE;MAChBoB,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpBlB,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,MAAM;MACLiB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBlB,QAAQ,CAAC,KAAK,CAAC;IACjB;EACF,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC;EAGbV,SAAS,CAAC,MAAM;IACd;IACA,IAAIgC,OAAO,GAAG,IAAIhB,KAAK,CAACX,QAAQ,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC;IAC5C,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,OAAO,CAACgB,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAIC,WAAW;QACf,IAAIC,QAAQ;QACZ,IAAIZ,MAAM,GAAGP,OAAO,CAACe,CAAC,CAAC;QACvB,GAAG;UACDG,WAAW,GAAGE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGnC,QAAQ,CAAC;UAClDgC,QAAQ,GAAGL,OAAO,CAACI,WAAW,CAAC;QACjC,CAAC,QAAQjB,QAAQ,CAACkB,QAAQ,CAAC;QAE3BL,OAAO,CAACI,WAAW,CAAC,GAAGX,MAAM;MAC/B;IACF;IACAV,OAAO,CAACiB,OAAO,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAENF,OAAO,CAACC,GAAG,CAACjB,SAAS,CAAC2B,QAAQ,CAAC,CAAC,CAAC;EAEjC,oBACEvC,OAAA;IAAKwC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzC,OAAA;MAAAyC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB7C,OAAA;MAAKwC,SAAS,EAAC,MAAM;MAAAC,QAAA,EAClB7B,SAAS,CAACkC,GAAG,CAAC,CAACvB,MAAM,EAAEE,KAAK,KAAK;QAChC,oBAAOzB,OAAA,CAACJ,IAAI;UAAamD,EAAE,EAAEtB,KAAM;UAACF,MAAM,EAAEA,MAAO;UAACf,OAAO,EAAEA,OAAQ;UAACwC,UAAU,EAAE7B,eAAgB;UAAC8B,UAAU,EAAE5B,eAAgB;UAACX,KAAK,EAAEA,KAAM;UAACY,SAAS,EAAEA,SAAU;UAACE,YAAY,EAAEA;QAAa,GAA7KC,KAAK;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAyK,CAAC;MACnM,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN7C,OAAA;MAAKwC,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACrBzC,OAAA;QAAAyC,QAAA,GAAI,UAAQ,EAACrC,UAAU;MAAA;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eACN7C,OAAA;MAAAyC,QAAA,EAAKnC,UAAU,CAACiC,QAAQ,CAAC;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE7B,CAAC;AAEV;AAAC3C,EAAA,CAxFQD,GAAG;AAAAiD,EAAA,GAAHjD,GAAG;AA0FZ,eAAeA,GAAG;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tpong\\\\OneDrive\\\\Documents\\\\____CS_Projects_Tobias\\\\memory_test\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const gridSize = 16;\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [grid, setGrid] = useState(new Array(gridSize));\n  //var grid = new Array(gridSize);\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  var tileID = 1;\n  var renderCounter = 0;\n  function isFilled(value) {\n    return value !== undefined;\n  }\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      console.log(\"maxed\");\n      isMaxSet(true);\n    } else {\n      console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n  }, [counter, isMax]);\n\n  //creating the grid positions for the letters\n  for (var i = 0; i < letters.length; i++) {\n    for (var j = 0; j < 2; j++) {\n      renderCounter++;\n      let randomIndex;\n      let posValue;\n      let letter = letters[i];\n      do {\n        renderCounter++;\n        randomIndex = Math.floor(Math.random() * 16);\n        posValue = grid[randomIndex];\n      } while (isFilled(posValue));\n      setGrid([]);\n      //setGrid(prevValue => [...prevValue.slice(0, randomIndex), letter, ...prevValue.slice(randomIndex)]);\n      //grid[randomIndex] = letter;\n    }\n  }\n  console.log(grid.toString());\n  console.log(\"render counter: \" + renderCounter);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map(letter => {\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: tileID++,\n          letter: letter,\n          counter: counter,\n          counterInc: counterIncrease,\n          counterDec: counterDecrease,\n          isMax: isMax\n        }, tileID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"puXxQcaH3LV060KU+KtNQrU2rTY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Tile","useState","useEffect","jsxDEV","_jsxDEV","App","_s","gridSize","counter","setCounter","isMax","isMaxSet","grid","setGrid","Array","letters","tileID","renderCounter","isFilled","value","undefined","counterIncrease","prevValue","counterDecrease","console","log","i","length","j","randomIndex","posValue","letter","Math","floor","random","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","id","counterInc","counterDec","_c","$RefreshReg$"],"sources":["C:/Users/tpong/OneDrive/Documents/____CS_Projects_Tobias/memory_test/src/App.js"],"sourcesContent":["import './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const gridSize = 16;\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [grid, setGrid] = useState(new Array(gridSize));\n  //var grid = new Array(gridSize);\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n  var tileID = 1;\n  var renderCounter = 0;\n\n  function isFilled(value) {\n    return value !== undefined;\n  }\n\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  \n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      console.log(\"maxed\");\n      isMaxSet(true);\n    } else {\n      console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n  }, [counter, isMax]);\n\n  //creating the grid positions for the letters\n  for (var i = 0; i < letters.length; i++) {\n    for (var j = 0; j < 2; j++) {\n      renderCounter++;\n      let randomIndex;\n      let posValue;\n      let letter = letters[i];\n      do {\n        renderCounter++;\n        randomIndex = Math.floor(Math.random() * 16);\n        posValue = grid[randomIndex];\n      } while (isFilled(posValue));\n\n      setGrid([]);\n      //setGrid(prevValue => [...prevValue.slice(0, randomIndex), letter, ...prevValue.slice(randomIndex)]);\n      //grid[randomIndex] = letter;\n    }\n  }\n  console.log(grid.toString());\n  console.log(\"render counter: \" + renderCounter);\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <div className=\"grid\">\n        {grid.map((letter) => {\n          return <Tile key={tileID} id={tileID++} letter={letter} counter={counter} counterInc={counterIncrease} counterDec={counterDecrease} isMax={isMax}/>;\n        })}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,IAAI,MAAM,QAAQ;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAIa,KAAK,CAACP,QAAQ,CAAC,CAAC;EACrD;EACA,MAAMQ,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACxD,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,aAAa,GAAG,CAAC;EAErB,SAASC,QAAQA,CAACC,KAAK,EAAE;IACvB,OAAOA,KAAK,KAAKC,SAAS;EAC5B;EAEA,SAASC,eAAeA,CAAA,EAAG;IACzBZ,UAAU,CAACa,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EACxC;EAEA,SAASC,eAAeA,CAAA,EAAG;IACzBd,UAAU,CAACa,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EACxC;EAEApB,SAAS,CAAC,MAAM;IACdsB,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGjB,OAAO,CAAC;IACjC,IAAIA,OAAO,IAAI,CAAC,EAAE;MAChBgB,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpBd,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,MAAM;MACLa,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBd,QAAQ,CAAC,KAAK,CAAC;IACjB;EACF,CAAC,EAAE,CAACH,OAAO,EAAEE,KAAK,CAAC,CAAC;;EAEpB;EACA,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,OAAO,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BX,aAAa,EAAE;MACf,IAAIY,WAAW;MACf,IAAIC,QAAQ;MACZ,IAAIC,MAAM,GAAGhB,OAAO,CAACW,CAAC,CAAC;MACvB,GAAG;QACDT,aAAa,EAAE;QACfY,WAAW,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC5CJ,QAAQ,GAAGlB,IAAI,CAACiB,WAAW,CAAC;MAC9B,CAAC,QAAQX,QAAQ,CAACY,QAAQ,CAAC;MAE3BjB,OAAO,CAAC,EAAE,CAAC;MACX;MACA;IACF;EACF;EACAW,OAAO,CAACC,GAAG,CAACb,IAAI,CAACuB,QAAQ,CAAC,CAAC,CAAC;EAC5BX,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAAGR,aAAa,CAAC;EAE/C,oBACEb,OAAA;IAAKgC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBjC,OAAA;MAAAiC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBrC,OAAA;MAAKgC,SAAS,EAAC,MAAM;MAAAC,QAAA,EAClBzB,IAAI,CAAC8B,GAAG,CAAEX,MAAM,IAAK;QACpB,oBAAO3B,OAAA,CAACJ,IAAI;UAAc2C,EAAE,EAAE3B,MAAM,EAAG;UAACe,MAAM,EAAEA,MAAO;UAACvB,OAAO,EAAEA,OAAQ;UAACoC,UAAU,EAAEvB,eAAgB;UAACwB,UAAU,EAAEtB,eAAgB;UAACb,KAAK,EAAEA;QAAM,GAA/HM,MAAM;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA0H,CAAC;MACrJ,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEV;AAACnC,EAAA,CAlEQD,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AAoEZ,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
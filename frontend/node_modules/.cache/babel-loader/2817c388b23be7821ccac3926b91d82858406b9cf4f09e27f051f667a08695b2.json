{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tpong\\\\OneDrive\\\\Documents\\\\____CS_Projects_Tobias\\\\memory_test\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const gridSize = 16;\n  const [numReveals, setReveals] = useState(0);\n  const [revealList, setRevealList] = useState([]);\n  const [pairedLetters, setPairs] = useState([]);\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [record, setRecord] = useState(null);\n  const [gridState, setGrid] = useState(new Array(gridSize).fill(null));\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  function isFilled(value) {\n    return value !== null;\n  }\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  function addReveal(letter) {\n    setReveals(prevValue => prevValue + 1);\n    setRevealList(prevValue => [...prevValue, letter]);\n    console.log(\"Number of reveals: \" + numReveals);\n    //console.log(\"Reveal List: \" + revealList.toString());\n  }\n  function removeReveal(letter) {\n    const index = revealList.findIndex(reveal => reveal === letter);\n    //console.log(\"index: \" + index);\n    //console.log(\"Removing \" + letter);\n    setRevealList(prevValue => {\n      if (index === 1) {\n        return prevValue.slice(0, 1);\n      } else if (index === 0) {\n        return prevValue.slice(1);\n      } else {\n        console.log(\"ERROR at removeReveal\");\n      }\n    });\n  }\n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      //console.log(\"maxed\");\n      isMaxSet(true);\n      if (revealList[0] === revealList[1]) {\n        console.log(\"Paired \" + revealList[0]);\n        setPairs(prevValue => [...prevValue, revealList[0]]);\n        setCounter(0);\n        setRevealList([]);\n      }\n    } else {\n      //console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n    if (pairedLetters.length === letters.length) {\n      if (record === null || numReveals < record) {\n        setRecord(numReveals);\n        console.log(\"RECORD WIN\");\n      } else {\n        console.log(\"Not a record\");\n      }\n    }\n  }, [counter, revealList]);\n  useEffect(() => {\n    //creating the grid positions for the letters\n    let newGrid = new Array(gridSize).fill(null);\n    for (let i = 0; i < letters.length; i++) {\n      for (let j = 0; j < 2; j++) {\n        let randomIndex;\n        let posValue;\n        let letter = letters[i];\n        do {\n          randomIndex = Math.floor(Math.random() * gridSize);\n          posValue = newGrid[randomIndex];\n        } while (isFilled(posValue));\n        newGrid[randomIndex] = letter;\n      }\n    }\n    setGrid(newGrid);\n  }, []);\n  console.log(gridState.toString());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: gridState.map((letter, index) => {\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: index,\n          letter: letter,\n          counter: counter,\n          counterInc: counterIncrease,\n          counterDec: counterDecrease,\n          isMax: isMax,\n          addReveal: addReveal,\n          removeReveal: removeReveal,\n          pairList: pairedLetters\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Record\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Record: \", numReveals]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KxB2e0d11C1UfwJxgK1UaJm7Gpg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Tile","useState","useEffect","jsxDEV","_jsxDEV","App","_s","gridSize","numReveals","setReveals","revealList","setRevealList","pairedLetters","setPairs","counter","setCounter","isMax","isMaxSet","record","setRecord","gridState","setGrid","Array","fill","letters","isFilled","value","counterIncrease","prevValue","counterDecrease","addReveal","letter","console","log","removeReveal","index","findIndex","reveal","slice","length","newGrid","i","j","randomIndex","posValue","Math","floor","random","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","id","counterInc","counterDec","pairList","_c","$RefreshReg$"],"sources":["C:/Users/tpong/OneDrive/Documents/____CS_Projects_Tobias/memory_test/src/App.js"],"sourcesContent":["import './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const gridSize = 16;\n  const [numReveals, setReveals] = useState(0);\n  const [revealList, setRevealList] = useState([]);\n  const [pairedLetters, setPairs] = useState([]);\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [record, setRecord] = useState(null);\n  const [gridState, setGrid] = useState(new Array(gridSize).fill(null));\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n\n  function isFilled(value) {\n    return value !== null;\n  }\n\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  \n  function addReveal(letter) {\n    setReveals(prevValue => prevValue + 1);\n    setRevealList(prevValue => [...prevValue, letter]);\n    console.log(\"Number of reveals: \" + numReveals);\n    //console.log(\"Reveal List: \" + revealList.toString());\n  }\n\n  function removeReveal(letter) {\n    const index = revealList.findIndex((reveal) => reveal === letter);\n    //console.log(\"index: \" + index);\n    //console.log(\"Removing \" + letter);\n    setRevealList(prevValue => {\n      if (index === 1) {\n        return prevValue.slice(0,1);\n      } else if (index === 0) {\n        return prevValue.slice(1);\n      } else {\n        console.log(\"ERROR at removeReveal\");\n      }\n    });\n  }\n\n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      //console.log(\"maxed\");\n      isMaxSet(true);\n      if (revealList[0] === revealList[1]) {\n        console.log(\"Paired \" + revealList[0]);\n        setPairs(prevValue => [...prevValue, revealList[0]]);\n        setCounter(0);\n        setRevealList([]);\n      }\n    } else {\n      //console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n\n\n    if (pairedLetters.length === letters.length) {\n      if (record === null || numReveals < record) {\n        setRecord(numReveals);\n        console.log(\"RECORD WIN\");\n      } else {\n        console.log(\"Not a record\");\n      }\n    }\n  \n  }, [counter, revealList]);\n\n\n  useEffect(() => {\n    //creating the grid positions for the letters\n    let newGrid = new Array(gridSize).fill(null);\n    for (let i = 0; i < letters.length; i++) {\n      for (let j = 0; j < 2; j++) {\n        let randomIndex;\n        let posValue;\n        let letter = letters[i];\n        do {\n          randomIndex = Math.floor(Math.random() * gridSize);\n          posValue = newGrid[randomIndex];\n        } while (isFilled(posValue));\n\n        newGrid[randomIndex] = letter;\n      }\n    }\n    setGrid(newGrid);\n  }, []);\n\n  console.log(gridState.toString())\n  \n  \n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <div className=\"grid\">\n        {gridState.map((letter, index) => {\n          return <Tile key={index} id={index} letter={letter} counter={counter} counterInc={counterIncrease} counterDec={counterDecrease} isMax={isMax} addReveal={addReveal} removeReveal={removeReveal} pairList={pairedLetters}/>;\n        })}\n      </div>\n\n      <div className=\"Record\">\n        <h3>Record: {numReveals}</h3>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
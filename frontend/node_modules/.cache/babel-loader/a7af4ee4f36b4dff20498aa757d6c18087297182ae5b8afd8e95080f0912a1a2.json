{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tpong\\\\OneDrive\\\\Documents\\\\____CS_Projects_Tobias\\\\memory_test\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const gridSize = 16;\n  const [numReveals, setReveals] = useState(0);\n  const [revealList, setRevealList] = useState([]);\n  const [pairedLetters, setPairs] = useState([]);\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [record, setRecord] = useState(undefined);\n  const [doneRound, newRound] = useState(false);\n  const [gridState, setGrid] = useState(new Array(gridSize).fill(null));\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  function isFilled(value) {\n    return value !== null;\n  }\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  function addReveal(letter) {\n    setReveals(prevValue => prevValue + 1);\n    setRevealList(prevValue => [...prevValue, letter]);\n    console.log(\"Number of reveals: \" + numReveals);\n    //console.log(\"Reveal List: \" + revealList.toString());\n  }\n  function removeReveal(letter) {\n    const index = revealList.findIndex(reveal => reveal === letter);\n    //console.log(\"index: \" + index);\n    //console.log(\"Removing \" + letter);\n    setRevealList(prevValue => {\n      if (index === 1) {\n        return prevValue.slice(0, 1);\n      } else if (index === 0) {\n        return prevValue.slice(1);\n      } else {\n        console.log(\"ERROR at removeReveal\");\n      }\n    });\n  }\n  useEffect(() => {\n    // Fetch data from the API\n    fetch('http://localhost:5000/');\n    fetch('http://localhost:5000/api/score');\n  }, []);\n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      //console.log(\"maxed\");\n      isMaxSet(true);\n      if (revealList[0] === revealList[1]) {\n        console.log(\"Paired \" + revealList[0]);\n        setPairs(prevValue => [...prevValue, revealList[0]]);\n        setCounter(0);\n        setRevealList([]);\n      }\n    } else {\n      //console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n\n    //Game finished\n    if (pairedLetters.length === letters.length) {\n      if (record === null || numReveals < record && numReveals !== 0) {\n        console.log(\"Reveals: \" + numReveals);\n        setRecord(numReveals);\n        console.log(\"RECORD WIN\");\n      } else {\n        console.log(\"Not a record\");\n      }\n      setTimeout(() => {\n        newRound(true);\n      }, 2000);\n    }\n  }, [counter, revealList]);\n  useEffect(() => {\n    if (doneRound) {\n      //new game\n      setGrid(new Array(gridSize).fill(null));\n      setPairs([]);\n      setRevealList([]);\n      setReveals(0);\n      newRound(false);\n    }\n\n    //creating the grid positions for the letters\n    let newGrid = new Array(gridSize).fill(null);\n    for (let i = 0; i < letters.length; i++) {\n      for (let j = 0; j < 2; j++) {\n        let randomIndex;\n        let posValue;\n        let letter = letters[i];\n        do {\n          randomIndex = Math.floor(Math.random() * gridSize);\n          posValue = newGrid[randomIndex];\n        } while (isFilled(posValue));\n        newGrid[randomIndex] = letter;\n      }\n    }\n    setGrid(newGrid);\n  }, [doneRound]);\n  console.log(gridState.toString());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pair to Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: gridState.map((letter, index) => {\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: index,\n          letter: letter,\n          counter: counter,\n          counterInc: counterIncrease,\n          counterDec: counterDecrease,\n          isMax: isMax,\n          addReveal: addReveal,\n          removeReveal: removeReveal,\n          pairList: pairedLetters,\n          newGame: doneRound\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Round Total: \", numReveals, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Record Total: \", record !== undefined ? record : 'none']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/AbY0kIGsbNIsR4GTrvFzEMACQ8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Tile","useState","useEffect","jsxDEV","_jsxDEV","App","_s","gridSize","numReveals","setReveals","revealList","setRevealList","pairedLetters","setPairs","counter","setCounter","isMax","isMaxSet","record","setRecord","undefined","doneRound","newRound","gridState","setGrid","Array","fill","letters","isFilled","value","counterIncrease","prevValue","counterDecrease","addReveal","letter","console","log","removeReveal","index","findIndex","reveal","slice","fetch","length","setTimeout","newGrid","i","j","randomIndex","posValue","Math","floor","random","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","id","counterInc","counterDec","pairList","newGame","_c","$RefreshReg$"],"sources":["C:/Users/tpong/OneDrive/Documents/____CS_Projects_Tobias/memory_test/frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const gridSize = 16;\n  const [numReveals, setReveals] = useState(0);\n  const [revealList, setRevealList] = useState([]);\n  const [pairedLetters, setPairs] = useState([]);\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [record, setRecord] = useState(undefined);\n  const [doneRound, newRound] = useState(false);\n  const [gridState, setGrid] = useState(new Array(gridSize).fill(null));\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n\n  function isFilled(value) {\n    return value !== null;\n  }\n\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  \n  function addReveal(letter) {\n    setReveals(prevValue => prevValue + 1);\n    setRevealList(prevValue => [...prevValue, letter]);\n    console.log(\"Number of reveals: \" + numReveals);\n    //console.log(\"Reveal List: \" + revealList.toString());\n  }\n\n  function removeReveal(letter) {\n    const index = revealList.findIndex((reveal) => reveal === letter);\n    //console.log(\"index: \" + index);\n    //console.log(\"Removing \" + letter);\n    setRevealList(prevValue => {\n      if (index === 1) {\n        return prevValue.slice(0,1);\n      } else if (index === 0) {\n        return prevValue.slice(1);\n      } else {\n        console.log(\"ERROR at removeReveal\");\n      }\n    });\n  }\n\n  useEffect(() => {\n    // Fetch data from the API\n    fetch('http://localhost:5000/')\n    fetch('http://localhost:5000/api/score')\n  }, []);\n\n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      //console.log(\"maxed\");\n      isMaxSet(true);\n      if (revealList[0] === revealList[1]) {\n        console.log(\"Paired \" + revealList[0]);\n        setPairs(prevValue => [...prevValue, revealList[0]]);\n        setCounter(0);\n        setRevealList([]);\n      }\n    } else {\n      //console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n\n    //Game finished\n    if (pairedLetters.length === letters.length) {\n      if (record === null || (numReveals < record && numReveals !== 0)) {\n        console.log(\"Reveals: \" + numReveals);\n        setRecord(numReveals);\n        console.log(\"RECORD WIN\");\n      } else {\n        console.log(\"Not a record\");\n      }\n      setTimeout(() => {\n        newRound(true);\n      }, 2000);\n    }\n  \n  }, [counter, revealList]);\n\n\n  useEffect(() => {\n\n    if (doneRound) { //new game\n      setGrid(new Array(gridSize).fill(null));\n      setPairs([]);\n      setRevealList([]);\n      setReveals(0);\n      newRound(false);\n    }\n\n    //creating the grid positions for the letters\n    let newGrid = new Array(gridSize).fill(null);\n    for (let i = 0; i < letters.length; i++) {\n      for (let j = 0; j < 2; j++) {\n        let randomIndex;\n        let posValue;\n        let letter = letters[i];\n        do {\n          randomIndex = Math.floor(Math.random() * gridSize);\n          posValue = newGrid[randomIndex];\n        } while (isFilled(posValue));\n\n        newGrid[randomIndex] = letter;\n      }\n    }\n    setGrid(newGrid);\n  }, [doneRound]);\n\n  console.log(gridState.toString())\n  \n  return (\n    <div className=\"App\">\n      <h1>Pair to Play</h1>\n      <div className=\"grid\">\n        {gridState.map((letter, index) => {\n          return <Tile key={index} id={index} letter={letter} counter={counter} counterInc={counterIncrease} counterDec={counterDecrease} isMax={isMax} addReveal={addReveal} removeReveal={removeReveal} pairList={pairedLetters} newGame={doneRound}/>;\n        })}\n      </div>\n\n      <div className=\"Footer\">\n        <h3>Round Total: {numReveals} </h3>\n        <h3>Record Total: {record !== undefined ? record : 'none'}</h3>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tpong\\\\OneDrive\\\\Documents\\\\____CS_Projects_Tobias\\\\memory_test\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const gridSize = 16;\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [gridState, setGrid] = useState(new Array(gridSize).fill(null));\n  //let grid = new Array(gridSize).fill(null);\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  let tileID = 1;\n  function isFilled(value) {\n    return value !== null;\n  }\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      console.log(\"maxed\");\n      isMaxSet(true);\n    } else {\n      console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n  }, [counter, isMax]);\n  useEffect(() => {\n    let newGrid = new Array(gridSize).fill(null);\n    for (let i = 0; i < letters.length; i++) {\n      for (let j = 0; j < 2; j++) {\n        let randomIndex;\n        let posValue;\n        let letter = letters[i];\n        do {\n          randomIndex = Math.floor(Math.random() * gridSize);\n          posValue = newGrid[randomIndex];\n        } while (isFilled(posValue));\n        newGrid[randomIndex] = letter;\n      }\n    }\n    setGrid(newGrid);\n  }, []);\n\n  /*//creating the grid positions for the letters\n  for (var i = 0; i < letters.length; i++) {\n    for (var j = 0; j < 2; j++) {\n      let randomIndex;\n      let posValue;\n      let letter = letters[i];\n      do {\n        randomIndex = Math.floor(Math.random() * 16);\n        posValue = grid[randomIndex];\n      } while (isFilled(posValue));\n       //setGrid(['A']);\n      //setGrid(prevValue => [...prevValue.slice(0, randomIndex), letter, ...prevValue.slice(randomIndex)]);\n      grid[randomIndex] = letter;\n    }\n  }\n  console.log(grid.toString());*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((letter, index) => {\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: index,\n          letter: letter,\n          counter: counter,\n          counterInc: counterIncrease,\n          counterDec: counterDecrease,\n          isMax: isMax\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ozPXUzvVN6T0bGc7l2GmASyXbjo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Tile","useState","useEffect","jsxDEV","_jsxDEV","App","_s","gridSize","counter","setCounter","isMax","isMaxSet","gridState","setGrid","Array","fill","letters","tileID","isFilled","value","counterIncrease","prevValue","counterDecrease","console","log","newGrid","i","length","j","randomIndex","posValue","letter","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","grid","map","index","id","counterInc","counterDec","_c","$RefreshReg$"],"sources":["C:/Users/tpong/OneDrive/Documents/____CS_Projects_Tobias/memory_test/src/App.js"],"sourcesContent":["import './App.css';\nimport Tile from \"./Tile\";\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const gridSize = 16;\n  const [counter, setCounter] = useState(0);\n  const [isMax, isMaxSet] = useState(false);\n  const [gridState, setGrid] = useState(new Array(gridSize).fill(null));\n  //let grid = new Array(gridSize).fill(null);\n  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n  let tileID = 1;\n\n  function isFilled(value) {\n    return value !== null;\n  }\n\n  function counterIncrease() {\n    setCounter(prevValue => prevValue + 1);\n  }\n\n  function counterDecrease() {\n    setCounter(prevValue => prevValue - 1);\n  }\n  \n  useEffect(() => {\n    console.log(\"counter:\" + counter);\n    if (counter >= 2) {\n      console.log(\"maxed\");\n      isMaxSet(true);\n    } else {\n      console.log(\"not maxed\");\n      isMaxSet(false);\n    }\n  }, [counter, isMax]);\n\n\n  useEffect(() => {\n    let newGrid = new Array(gridSize).fill(null);\n    for (let i = 0; i < letters.length; i++) {\n      for (let j = 0; j < 2; j++) {\n        let randomIndex;\n        let posValue;\n        let letter = letters[i];\n        do {\n          randomIndex = Math.floor(Math.random() * gridSize);\n          posValue = newGrid[randomIndex];\n        } while (isFilled(posValue));\n\n        newGrid[randomIndex] = letter;\n      }\n    }\n    setGrid(newGrid);\n  }, []);\n\n  \n  /*//creating the grid positions for the letters\n  for (var i = 0; i < letters.length; i++) {\n    for (var j = 0; j < 2; j++) {\n      let randomIndex;\n      let posValue;\n      let letter = letters[i];\n      do {\n        randomIndex = Math.floor(Math.random() * 16);\n        posValue = grid[randomIndex];\n      } while (isFilled(posValue));\n\n      //setGrid(['A']);\n      //setGrid(prevValue => [...prevValue.slice(0, randomIndex), letter, ...prevValue.slice(randomIndex)]);\n      grid[randomIndex] = letter;\n    }\n  }\n  console.log(grid.toString());*/\n  \n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <div className=\"grid\">\n        {grid.map((letter, index) => {\n          return <Tile key={index} id={index} letter={letter} counter={counter} counterInc={counterIncrease} counterDec={counterDecrease} isMax={isMax}/>;\n        })}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}